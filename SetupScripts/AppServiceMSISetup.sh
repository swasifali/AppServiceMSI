#!/bin/bash#login to azure#az login#set subscription to POC environment#change this as per requirementaz account set --subscription "EMEA-UK-POSTERSCOPE-ECOS"#show current subscription account details#make sure this is the one you want to useaz account show# this is where the POC code is hosted# the code is generic so no issue with public hostinggitrepo=https://github.com/swasifali/AppServiceMSIresource_group_name=AppServiceSQLMSI$RANDOMwebappname=SampleAppWithMSI$RANDOM# Create a resource group.az group create --location westeurope --name $resource_group_name# Create an App Service plan in FREE tieraz appservice plan create --name $webappname --resource-group $resource_group_name --sku FREE# Create a web app.az webapp create --name $webappname --resource-group $resource_group_name --plan $webappname#deploy web app through config-src (required if using local project)#az webapp deployment source config-zip --resource-group $resource_group_name --name $webappname --src ./clouddrive/DotNetAppSqlDb.zip#deploy web app through git repoaz webapp deployment source config --name $webappname --resource-group $resource_group_name --repo-url $gitrepo --branch master --manual-integration# Copy the result of the following command # into a browser to see the web appecho http://$webappname.azurewebsites.net#this will give an error - as we need to configure MSI#enable/assign managed identity on webappaz webapp identity assign --resource-group $resource_group_name --name $webappname# NOW SETUP SQL DATABASE #export adminlogin=ServerAdminexport password=P@ssw0rdMSI# The logical server name has to be unique in the systemexport servername=server-$RANDOM#database nameexport dbname=DotNetAppSqlDb-MSI# The ip address range that you want to allow to access your DBexport startip=0.0.0.0export endip=0.0.0.0az sql server create --name $servername --resource-group $resource_group_name --location westeurope  --admin-user $adminlogin --admin-password $password# Configure a firewall rule for the server# This switches "Allow access to Azure Services" setting to ON.az sql server firewall-rule create --resource-group $resource_group_name --server $servername -n AllowYourIp --start-ip-address $startip --end-ip-address $endip# Create database for the app service app in the server az sql db create --resource-group $resource_group_name --server $servername --name $dbname --service-objective Basic#give your own AD account admin access to SQL DB #get Service Principal for your own (signed-in) accountsignedInUserSPID=$(az ad signed-in-user show --query objectId -o tsv)signedInUserName=$(az ad signed-in-user show --query userPrincipalName -o tsv) #make it ad-admin on the sql serveraz sql server ad-admin create --resource-group $resource_group_name --server $servername --display-name $signedInUserName --object-id $signedInUserSPID##get connection string from sql db#get fully qualified domain name of the sql serverSqlServerFQDN=$(az sql server show --resource-group $resource_group_name --name $servername --query fullyQualifiedDomainName -o tsv)#build web app connection string for MSIwebapp_connection_string='Server=tcp:'$SqlServerFQDN',1433;Database='$dbname';'#set connection string in the web app settingsaz webapp config connection-string set --resource-group $resource_group_name --name $webappname --settings MyDbConnection=$webapp_connection_string --connection-string-type SQLAzure#sqlcmd.exe -S $SqlServerFQDN -d $dbname -U $signedInUserName -G -l 30 -v ServicePrincipalName=$webappname -i "./AppServicePermissions.sql"